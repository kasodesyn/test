{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { ethers, BigNumber } from \"ethers\";\nimport Token from \"../../contracts/Token.json\";\nimport { proof, isIncludes, whiteList } from './data';\nconst addressForTest = '0x2fc5fF3c967274E0A32F64eA031CA886A7e7BC43';\nconst MainMit = _ref => {\n  _s();\n  let {\n    accounts\n  } = _ref;\n  const [flag, setFlag] = useState(false);\n  const [value, setValue] = useState(1);\n  const isConnected = Boolean(accounts[0]);\n  async function handleMint() {\n    console.log(\"num\", value);\n    if (window.ethereum) {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(addressForTest,\n      // 合约地址\n      Token.abi, signer);\n      try {\n        if (flag) {\n          return;\n        }\n        setFlag(true);\n        const name = await contract.name();\n        setFlag(false);\n        console.log(name, 'name');\n      } catch (err) {\n        console.log(\"error\", err);\n      }\n    }\n  }\n  async function handleMintGuest() {\n    if (window.ethereum) {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(addressForTest,\n      // 合约地址\n      Token.abi, signer);\n      try {\n        if (flag) {\n          return;\n        }\n        setFlag(true);\n        const response = await contract.mintGuest(BigNumber.from(value), {\n          value: ethers.utils.parseEther((0.08 * value).toString())\n        });\n        window.alert('success!');\n        setFlag(false);\n        console.log(\"response\", response);\n      } catch (err) {\n        console.log(\"error\", err);\n        window.alert('fail!');\n      }\n    }\n  }\n  async function handleMintWhiteList() {\n    if (window.ethereum) {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(addressForTest,\n      // 合约地址\n      Token.abi, signer);\n      try {\n        if (flag) {\n          return;\n        }\n        setFlag(true);\n        await contract.mintWhiteList(proof, value, {\n          value: ethers.utils.parseEther((0.06 * value).toString())\n        });\n        setFlag(false);\n      } catch (err) {\n        console.log(\"error\", err);\n      }\n    }\n  }\n\n  // -\n  const handlerDecrement = () => {\n    if (value - 1 === 0) {\n      console.log(value, 'value');\n      return;\n    }\n    setValue(pre => pre - 1);\n  };\n  // +\n  const handlerIncrement = () => {\n    if (value + 1 === 6) {\n      console.log(value, 'value');\n      return;\n    }\n    setValue(pre => pre + 1);\n  };\n  return {\n    handleMint,\n    handlerDecrement,\n    handlerIncrement,\n    isConnected,\n    flag,\n    handleMintGuest,\n    handleMintWhiteList,\n    isWhiteList: isIncludes(accounts[0]),\n    value\n  };\n};\n_s(MainMit, \"uzUIV3vxtLlYMzDD3o+VvULOaDI=\");\n_c = MainMit;\nexport default MainMit;\nvar _c;\n$RefreshReg$(_c, \"MainMit\");","map":{"version":3,"names":["useState","ethers","BigNumber","Token","proof","isIncludes","whiteList","addressForTest","MainMit","accounts","flag","setFlag","value","setValue","isConnected","Boolean","handleMint","console","log","window","ethereum","provider","providers","Web3Provider","signer","getSigner","contract","Contract","abi","name","err","handleMintGuest","response","mintGuest","from","utils","parseEther","toString","alert","handleMintWhiteList","mintWhiteList","handlerDecrement","pre","handlerIncrement","isWhiteList"],"sources":["/Users/kasoqian/Downloads/web3-react/src/pages/mint/utils.js"],"sourcesContent":["import { useState } from \"react\";\nimport { ethers, BigNumber } from \"ethers\";\nimport Token from \"../../contracts/Token.json\";\nimport { proof, isIncludes, whiteList } from './data'\n\nconst addressForTest = '0x2fc5fF3c967274E0A32F64eA031CA886A7e7BC43'\n\n\n\nconst MainMit = ({ accounts }) => {\n  const [flag, setFlag] = useState(false)\n  const [value, setValue] = useState(1)\n  const isConnected = Boolean(accounts[0]);\n  async function handleMint() {\n    console.log(\"num\", value);\n    if (window.ethereum) {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(\n        addressForTest, // 合约地址\n        Token.abi,\n        signer\n      )\n      try {\n        if (flag) {\n          return\n        }\n        setFlag(true)\n\n        const name = await contract.name()\n        setFlag(false)\n        console.log(name, 'name')\n      } catch (err) {\n        console.log(\"error\", err);\n      }\n    }\n  }\n\n  async function handleMintGuest() {\n    if (window.ethereum) {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(\n        addressForTest, // 合约地址\n        Token.abi,\n        signer\n      )\n      try {\n        if (flag) {\n          return\n        }\n        setFlag(true)\n        const response = await contract.mintGuest(BigNumber.from(value), {\n          value: ethers.utils.parseEther((0.08 * value).toString()),\n        })\n        window.alert('success!')\n        setFlag(false)\n        console.log(\"response\", response);\n      } catch (err) {\n        console.log(\"error\", err);\n        window.alert('fail!')\n\n      }\n    }\n  }\n  async function handleMintWhiteList() {\n    if (window.ethereum) {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(\n        addressForTest, // 合约地址\n        Token.abi,\n        signer\n      )\n      try {\n        if (flag) {\n          return\n        }\n        setFlag(true)\n        await contract.mintWhiteList(proof, value, {\n          value: ethers.utils.parseEther((0.06 * value).toString()),\n        })\n        setFlag(false)\n      } catch (err) {\n        console.log(\"error\", err);\n      }\n    }\n  }\n\n  // -\n  const handlerDecrement = () => {\n    if (value - 1 === 0) {\n      console.log(value, 'value')\n      return\n    }\n    setValue(pre => pre - 1)\n  };\n  // +\n  const handlerIncrement = () => {\n    if (value + 1 === 6) {\n      console.log(value, 'value')\n      return\n    }\n    setValue(pre => pre + 1)\n  };\n\n  return {\n    handleMint,\n    handlerDecrement,\n    handlerIncrement,\n    isConnected,\n    flag,\n    handleMintGuest,\n    handleMintWhiteList,\n    isWhiteList: isIncludes(accounts[0]),\n    value\n  }\n};\n\nexport default MainMit;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}