{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { ethers, BigNumber } from \"ethers\";\nimport Token from \"../../contracts/Token.json\";\nimport { proof, isIncludes, whiteList } from \"./data\";\nconst addressForTest = \"0x2fc5fF3c967274E0A32F64eA031CA886A7e7BC43\";\nconst MainMit = _ref => {\n  _s();\n  let {\n    accounts\n  } = _ref;\n  console.log(\"accounts\", accounts);\n  const [flag, setFlag] = useState(false);\n  const [value, setValue] = useState(1);\n  const isConnected = Boolean(accounts[0]);\n  const [isWhiteList, setIsWhiteList] = useState(false);\n  useEffect(() => {}, [accounts]);\n  async function handleMint() {\n    if (window.ethereum) {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(addressForTest,\n      // 合约地址\n      Token.abi, signer);\n      try {\n        if (flag) {\n          return;\n        }\n        setFlag(true);\n        const name = await contract.name();\n        setFlag(false);\n        console.log(name, \"name\");\n      } catch (err) {\n        console.log(\"error\", err);\n      }\n    }\n  }\n  async function handleMintGuest() {\n    if (window.ethereum) {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(addressForTest,\n      // 合约地址\n      Token.abi, signer);\n      try {\n        if (flag) {\n          return;\n        }\n        setFlag(true);\n        const response = await contract.mintGuest(BigNumber.from(value), {\n          value: ethers.utils.parseEther((0.08 * value).toString())\n        });\n        window.alert(\"success!\");\n        setFlag(false);\n        console.log(\"response\", response);\n      } catch (err) {\n        console.log(\"error\", err);\n        window.alert(\"fail!\");\n      }\n    }\n  }\n  async function handleMintWhiteList() {\n    if (window.ethereum) {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(addressForTest,\n      // 合约地址\n      Token.abi, signer);\n      try {\n        if (flag) {\n          return;\n        }\n        setFlag(true);\n        await contract.mintWhiteList(proof, value, {\n          value: ethers.utils.parseEther((0.06 * value).toString())\n        });\n        setFlag(false);\n      } catch (err) {\n        console.log(\"error\", err);\n      }\n    }\n  }\n\n  // -\n  const handlerDecrement = () => {\n    if (value - 1 === 0) {\n      console.log(value, \"value\");\n      return;\n    }\n    setValue(pre => pre - 1);\n  };\n  // +\n  const handlerIncrement = () => {\n    if (value + 1 === 6) {\n      console.log(value, \"value\");\n      return;\n    }\n    setValue(pre => pre + 1);\n  };\n  return {\n    handleMint,\n    handlerDecrement,\n    handlerIncrement,\n    isConnected,\n    flag,\n    handleMintGuest,\n    handleMintWhiteList,\n    isWhiteList: () => {\n      var _accounts$;\n      return whiteList.includes((_accounts$ = accounts[0]) === null || _accounts$ === void 0 ? void 0 : _accounts$.toString());\n    },\n    value\n  };\n};\n_s(MainMit, \"lZNVOxWUz8JaATYMhheTQmYKBXo=\");\n_c = MainMit;\nexport default MainMit;\nvar _c;\n$RefreshReg$(_c, \"MainMit\");","map":{"version":3,"names":["useEffect","useState","ethers","BigNumber","Token","proof","isIncludes","whiteList","addressForTest","MainMit","accounts","console","log","flag","setFlag","value","setValue","isConnected","Boolean","isWhiteList","setIsWhiteList","handleMint","window","ethereum","provider","providers","Web3Provider","signer","getSigner","contract","Contract","abi","name","err","handleMintGuest","response","mintGuest","from","utils","parseEther","toString","alert","handleMintWhiteList","mintWhiteList","handlerDecrement","pre","handlerIncrement","includes"],"sources":["/Users/kasoqian/Downloads/web3-react/src/pages/mint/utils.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { ethers, BigNumber } from \"ethers\";\nimport Token from \"../../contracts/Token.json\";\nimport { proof, isIncludes, whiteList } from \"./data\";\n\nconst addressForTest = \"0x2fc5fF3c967274E0A32F64eA031CA886A7e7BC43\";\n\nconst MainMit = ({ accounts }) => {\n  console.log(\"accounts\",accounts)\n  const [flag, setFlag] = useState(false);\n  const [value, setValue] = useState(1);\n  const isConnected = Boolean(accounts[0]);\n  const [isWhiteList,setIsWhiteList] = useState(false)\n\n  useEffect(()=>{\n\n  },[accounts])\n\n  async function handleMint() {\n    if (window.ethereum) {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(\n        addressForTest, // 合约地址\n        Token.abi,\n        signer\n      );\n      try {\n        if (flag) {\n          return;\n        }\n        setFlag(true);\n\n        const name = await contract.name();\n        setFlag(false);\n        console.log(name, \"name\");\n      } catch (err) {\n        console.log(\"error\", err);\n      }\n    }\n  }\n\n  async function handleMintGuest() {\n    if (window.ethereum) {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(\n        addressForTest, // 合约地址\n        Token.abi,\n        signer\n      );\n      try {\n        if (flag) {\n          return;\n        }\n        setFlag(true);\n        const response = await contract.mintGuest(BigNumber.from(value), {\n          value: ethers.utils.parseEther((0.08 * value).toString()),\n        });\n        window.alert(\"success!\");\n        setFlag(false);\n        console.log(\"response\", response);\n      } catch (err) {\n        console.log(\"error\", err);\n        window.alert(\"fail!\");\n      }\n    }\n  }\n  async function handleMintWhiteList() {\n    if (window.ethereum) {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(\n        addressForTest, // 合约地址\n        Token.abi,\n        signer\n      );\n      try {\n        if (flag) {\n          return;\n        }\n        setFlag(true);\n        await contract.mintWhiteList(proof, value, {\n          value: ethers.utils.parseEther((0.06 * value).toString()),\n        });\n        setFlag(false);\n      } catch (err) {\n        console.log(\"error\", err);\n      }\n    }\n  }\n\n  // -\n  const handlerDecrement = () => {\n    if (value - 1 === 0) {\n      console.log(value, \"value\");\n      return;\n    }\n    setValue((pre) => pre - 1);\n  };\n  // +\n  const handlerIncrement = () => {\n    if (value + 1 === 6) {\n      console.log(value, \"value\");\n      return;\n    }\n    setValue((pre) => pre + 1);\n  };\n\n  return {\n    handleMint,\n    handlerDecrement,\n    handlerIncrement,\n    isConnected,\n    flag,\n    handleMintGuest,\n    handleMintWhiteList,\n    isWhiteList: ()=> whiteList.includes(accounts[0]?.toString()),\n    value,\n  };\n};\n\nexport default MainMit;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}